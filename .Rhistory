install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("RMySQL")
library(MySQL)
library(RMySQL)
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-X:size)
select(cran,-(X:size))
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="IN")
filter(Cran, country=="US"|country=="IN")
filter(cran, country=="US"|country=="IN")
filter(cran, size>100500 & r_os=="linux_gnu")
filter(cran, size>100500 & r_os=="linux-gnu")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- 'select(cran,size:ip_id)
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "c7be5bdcf99c8407e6a1")
?oauth_app
myapp <- oauth_app("github", "c7be5bdcf99c8407e6a1", "5c975f2d99014b8875e00b6ffda3c89975b2b17c")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
?sign_oauth1.0
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req
stop_for_status(req)
stop_for_status(req)
content(req)
library(swirl)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
?trellis
?par
?lattice
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?ggplot
?qplot
library(swirl)
swirl()
?install
?swirl
setwd("~/GitHub/RepData_PeerAssessment1")
data <- read.csv("activity/activity.csv")
View(data)
mean(data$steps, na.rm =TRUE)
median(data$steps, na.rm =TRUE)
?histogram
?plot
plot(data$steps,type="h")
?hist
hist(data$steps)
tapply(data$steps,data$date, mean, na.rm=TRUE)
mean_dat <- tapply(data$steps,data$date, mean, na.rm=TRUE)
head(mean_dat)
mean(mean_dat)
mean(mean_dat,na.rm=TRUE)
hist(mean_dat)
median(mean_dat,na.rm=TRUE)
summary(mean_dat)
totStepsPerDay <- tapply(data$steps,data$date,sum, na.rm=TRUE)
mean(totStepsPerDay)
median(totStepsPerDay)
head(totStepsPerDay)
hist(totStepsPerDay)
summary(totStepsPerDay)
totalStepsPerInterval <- tapply(data$steps, data$interval,sum, na.rm=TRUE)
head(totalStepsPerInterval)
summary(totalStepsPerInterval)
avgStepsPerInterval <- tapply(data$steps,data$interval,mean,na.rm=TRUE)
head(avgStepsPerInterval)
plot(data$interval,avgStepsPerInterval,type="l")
plot(avgStepsPerInterval,type="l")
avgStepsPerInterval
avgStepsPerInterval[4]
avgStepsPerInterval[,4]
avgStepsPerInterval[4,]
max(avgStepsPerInterval)
summary(avgStepsPerInterval)
summary(avgStepsPerInterval[])
max(avgStepsPerInterval[])
max(avgStepsPerInterval[1:288])
avgStepsPerInterval <- data.frame(tapply(data$steps,data$interval,mean,na.rm=TRUE))
View(avgStepsPerInterval)
View(avgStepsPerInterval)
avgStepsPerInterval <- data.frame(tapply(data$steps,data$interval,mean,na.rm=TRUE),names=c("interval","avgSteps"))
View(avgStepsPerInterval)
avgStepsPerInterval <- data.frame(tapply(data$steps,data$interval,mean,na.rm=TRUE))
names(avgStepsPerInterval) <- c("interval","avgSteps")
?data.frame
names(avgStepsPerInterval) <- list("interval","avgSteps")
names(avgStepsPerInterval)[1] <- "interval"
names(avgStepsPerInterval)[2] <- "avgSteps"
View(avgStepsPerInterval)
names(avgStepsPerInterval)[1] <- "avgSteps"
names(avgStepsPerInterval)[0] <- "interval"
View(avgStepsPerInterval)
avgStepsPerInterval <- table(tapply(data$steps,data$interval,mean,na.rm=TRUE))
avgStepsPerInterval <- data.frame(tapply(data$steps,data$interval,mean,na.rm=TRUE))
row.names(max(avgStepsPerInterval))
index(max(avgStepsPerInterval))
which.max(avgStepsPerInterval)
?which
avgStepsPerInterval <- data.frame(data$interval, tapply(data$steps,data$interval,mean,na.rm=TRUE))
avgStepsPerInterval <- data.frame(unique(data$interval), tapply(data$steps,data$interval,mean,na.rm=TRUE))
View(avgStepsPerInterval)
avgStepsPerInterval <- data.frame(unique(data$interval), tapply(data$steps,data$interval,mean,na.rm=TRUE), row.names=FALSE)
?data.frame
avgStepsPerInterval <- data.frame(unique(data$interval), tapply(data$steps,data$interval,mean,na.rm=TRUE), row.names=NULL)
View(avgStepsPerInterval)
names(avgStepsPerInterval) <- c("interval","avgSteps")
View(avgStepsPerInterval)
plot(avgStepsPerInterval$interval,avgStepsPerInterval$avgSteps,type="l")
max(avgStepsPerInterval)
max(avgStepsPerInterval$avgSteps)
which.max(avgStepsPerInterval)
summary(avgStepsPerInterval)
which.max(avgStepsPerInterval$avgSteps)
?which
which.max(avgStepsPerInterval$avgSteps,useNames=TRUE)
?which.max
View(data)
sum(is.na(data$steps))
View(avgStepsPerInterval)
?subset
data[2]
data[,2]
data[2,]
data$steps[2]
tmp <- subset(avgStepsPerInterval,data$interval[2]==avgStepsPerInterval$interval)
tmp
is.na(data$steps[2])
new_data <- data
for(i in 1:length(new_data)) {
if (new_data$steps[i]==NA) {
tmp <- subset(avgStepsPerInterval, new_data$interval[i]==avgStepsPerInterval$interval)
new_data$steps[i] <- tmp$avgSteps
}
}
for(i in 1:length(new_data)) {
if (is.na(new_data$steps[i])) {
tmp <- subset(avgStepsPerInterval, new_data$interval[i]==avgStepsPerInterval$interval)
new_data$steps[i] <- tmp$avgSteps
}
}
View(new_data)
length(new_data)
count(new_data)
rows(new_data)
row(new_data)
?data.frame
nrow(new_data)
new_data <- data
for(i in 1:nrow(new_data)) {
if (is.na(new_data$steps[i])) {
tmp <- subset(avgStepsPerInterval, new_data$interval[i]==avgStepsPerInterval$interval)
new_data$steps[i] <- tmp$avgSteps
}
}
View(new_data)
avgStepsPerInterval <- data.frame(unique(new_data$interval), tapply(new_data$steps,new_data$interval,mean,na.rm=TRUE), row.names=NULL)
names(avgStepsPerInterval) <- c("interval","avgSteps")
plot(avgStepsPerInterval$interval, avgStepsPerInterval$avgSteps,type="l")
which.max(avgStepsPerInterval$avgSteps)
?plot
?hist
totalStepsPerDay_xform <- tapply(new_data$steps,new_data$date,sum, na.rm=TRUE)
mean(totalStepsPerDay_xform)
median(totalStepsPerDay_xform)
hist(totalStepsPerDay_xform, main="Total Steps Per Day (Part 3)")
hist(totalStepsPerDay, main="Total Steps Per Day (Part 1)")
hist(totStepsPerDay, main="Total Steps Per Day (Part 1)")
View(new_data)
new_data$weekend <- NULL
View(new_data)
new_data$weekend <- FALSE
View(new_data)
weekdays(new_data$date[3])
weekdays(as.date(new_data$date[3]))
?weekdays
class(new_data$date)
?as
weekdays(as.Date(new_data$date, format = "%m/%d/%Y"))
weekdays(as.Date(new_data$date[4], format = "%m/%d/%Y"))
as.Date(new_data[4])
as.Date(new_data$date[4])
weekdays(as.Date(new_date$date[4]))
weekdays(as.Date(new_data$date[4]))
for(i in 1:nrow(new_data)) {
if (weekdays(as.Date(new_data$date[i]))=="Saturday"){
new_data$weekend[i]=TRUE
} else {
if (weekdays(as.Date(new_data$date[i]))=="Sunday") {
new_data$weekend[i]=TRUE
}
}
}
summary(new_data$weekend)
new_data$weekend <- NULL
View(new_data)
new_data$weekend <- "weekday"
for(i in 1:nrow(new_data)) {
if (weekdays(as.Date(new_data$date[i]))=="Saturday"){
new_data$weekend[i]="weekend"
} else {
if (weekdays(as.Date(new_data$date[i]))=="Sunday") {
new_data$weekend[i]="weekend"
}
}
}
summary(new_data$weekend)
View(new_data)
sum(new_data$weekend=="weekend")
par(mfrow(2,1))
par(mfrow=c(2,1))
plot(unique(new_data$interval), tapply(new_data$steps,new_data$weekend=="weekday",mean),type="l",main="weekday")
plot(unique(new_data$interval), tapply(new_data$steps,new_data$interval & new_data$weekend=="weekday",mean),type="l",main="weekday")
tmp <- tapply(new_data$steps,new_data$interval & new_data$weekend=="weekday",mean)
summary(tmp)
count(tmp)
head(tmp)
tmp <- tapply(new_data$steps,new_data$interval & new_data$weekend=="weekday",mean,na.rm=TRUE)
head(tmp)
sum(new_data$weekend=="weekday")
sum(new_data$weekend=="weekend")
tmp <- tapply(new_data$steps,new_data$date & new_data$weekend=="weekday",mean,na.rm=TRUE)
tmp <- tapply(new_data$steps,new_data$interval & new_data$weekend=="weekday",mean,na.rm=TRUE)
avgWDStepsPerInterval <- data.frame(unique(new_data$interval),tapply(new_data$steps,new_data$interval & new_data$weekend=="weekday",mean,na.rm=TRUE),row.names=NULL)
avgWDStepsPerInterval <- within(new_data, data.frame(unique(interval),tapply(steps[weekend=="weekday"],interval[weekend=="weekday"],mean, na.rm=TRUE,row.names=NULL)))
View(avgWDStepsPerInterval)
names(avgWDStepsPerInterval) <- c("interval","avgSteps")
plot(avgWDStepsPerInterval$interval, avgWDStepsPerInterval$avgSteps,type="l",main="weekday")
avgWEStepsPerInterval <- within(new_data, data.frame(unique(interval),tapply(steps[weekend=="weekend"],interval[weekend=="weekend"],mean, na.rm=TRUE,row.names=NULL)))
names(avgWEStepsPerInterval) <- c("interval","avgSteps")
plot(avgWEStepsPerInterval$interval, avgWEStepsPerInterval$avgSteps,type="l",main="weekend")
View(avgWEStepsPerInterval)
avgWDStepsPerInterval <- within(new_data, data.frame(unique(interval),tapply(steps[weekend=="weekday"],interval[weekend=="weekday"],mean, na.rm=TRUE),row.names=NULL))
tmp2 <- within(new_data, data.frame(unique(interval),tapply(steps, list(interval,weekend=="weekday"),mean, na.rm=TRUE),row.names=NULL))
tmp2 <- within(new_data, data.frame(unique(interval),tapply(steps, list(unique(interval),weekend=="weekday"),mean, na.rm=TRUE),row.names=NULL))
tmp2 <- within(new_data, data.frame(unique(interval),tapply(steps[weekend=="weekday"],interval[weekend=="weekday"],mean, na.rm=TRUE),row.names=NULL))
nrow(new_data)
View(avgStepsPerInterval)
tmp2 <- within(new_data, data.frame(unique(interval[weekend=="weekday"]),tapply(steps[weekend=="weekday"],interval[weekend=="weekday"],mean, na.rm=TRUE),row.names=NULL))
tmp2 <- data.frame(unique(new_data$interval[new_data$weekend=="weekday"]),tapply(new_data$steps[new_data$weekend=="weekday"],new_data$interval[new_data$weekend=="weekday"],mean, na.rm=TRUE),row.names=NULL)
tmp3 <- data.frame(unique(new_data$interval[new_data$weekend=="weekend"]),tapply(new_data$steps[new_data$weekend=="weekend"],new_data$interval[new_data$weekend=="weekend"],mean, na.rm=TRUE),row.names=NULL)
plot(plot(tmp2$interval, tmp2$avgSteps,type="l",main="weekday"))
plot(tmp2$interval, tmp2$avgSteps,type="l",main="weekday"))
plot(tmp2$interval, tmp2$avgSteps,type="l",main="weekday")
View(tmp2)
View(tmp2)
names(tmp2) <- c("interval","steps")
names(tmp3) <- C("interval","steps")
View(tmp3)
names(tmp3) <- c("interval","steps")
plot(tmp2$interval, tmp2$steps,type="l",main="weekday")
plot(tmp3$interval, tmp3$steps,type="l",main="weekend")
?plot
?plot
library(lattice)
?lattice
?knit2html
ylab="steps")
library(knitr)
library(markdown)
knit2html(input="PA1_template.md", output="PA1_template.html")
